{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst envinfo_1 = __importDefault(require(\"envinfo\"));\nclass InfoCommand {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n    async apply(cli) {\n        await cli.makeCommand({\n            name: \"info\",\n            alias: \"i\",\n            description: \"Outputs information about your system.\",\n            usage: \"[options]\",\n            pkg: \"@webpack-cli/info\",\n        }, [\n            {\n                name: \"output\",\n                alias: \"o\",\n                configs: [\n                    {\n                        type: \"string\",\n                    },\n                ],\n                description: \"To get the output in a specified format ( accept json or markdown )\",\n            },\n            {\n                name: \"additional-package\",\n                alias: \"a\",\n                configs: [{ type: \"string\" }],\n                multiple: true,\n                description: \"Adds additional packages to the output\",\n            },\n        ], async (options) => {\n            let { output } = options;\n            const envinfoConfig = {};\n            if (output) {\n                // Remove quotes if exist\n                output = output.replace(/['\"]+/g, \"\");\n                switch (output) {\n                    case \"markdown\":\n                        envinfoConfig[\"markdown\"] = true;\n                        break;\n                    case \"json\":\n                        envinfoConfig[\"json\"] = true;\n                        break;\n                    default:\n                        cli.logger.error(`'${output}' is not a valid value for output`);\n                        process.exit(2);\n                }\n            }\n            const defaultInformation = {\n                Binaries: [\"Node\", \"Yarn\", \"npm\"],\n                Browsers: [\n                    \"Brave Browser\",\n                    \"Chrome\",\n                    \"Chrome Canary\",\n                    \"Edge\",\n                    \"Firefox\",\n                    \"Firefox Developer Edition\",\n                    \"Firefox Nightly\",\n                    \"Internet Explorer\",\n                    \"Safari\",\n                    \"Safari Technology Preview\",\n                ],\n                Monorepos: [\"Yarn Workspaces\", \"Lerna\"],\n                System: [\"OS\", \"CPU\", \"Memory\"],\n                npmGlobalPackages: [\"webpack\", \"webpack-cli\", \"webpack-dev-server\"],\n                npmPackages: \"{*webpack*,*loader*}\",\n            };\n            let defaultPackages = [\"webpack\", \"loader\"];\n            if (typeof options.additionalPackage !== \"undefined\") {\n                defaultPackages = [...defaultPackages, ...options.additionalPackage];\n            }\n            defaultInformation.npmPackages = `{${defaultPackages\n                .map((item) => `*${item}*`)\n                .join(\",\")}}`;\n            let info = await envinfo_1.default.run(defaultInformation, envinfoConfig);\n            info = info.replace(/npmPackages/g, \"Packages\");\n            info = info.replace(/npmGlobalPackages/g, \"Global Packages\");\n            cli.logger.raw(info);\n        });\n    }\n}\nexports.default = InfoCommand;\n"]}