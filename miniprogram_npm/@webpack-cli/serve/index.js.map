{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst WEBPACK_PACKAGE = process.env.WEBPACK_PACKAGE || \"webpack\";\nconst WEBPACK_DEV_SERVER_PACKAGE = process.env.WEBPACK_DEV_SERVER_PACKAGE || \"webpack-dev-server\";\nclass ServeCommand {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n    async apply(cli) {\n        const loadDevServerOptions = () => {\n            // TODO simplify this after drop webpack v4 and webpack-dev-server v3\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const devServer = require(WEBPACK_DEV_SERVER_PACKAGE);\n            const isNewDevServerCLIAPI = typeof devServer.schema !== \"undefined\";\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let options = {};\n            if (isNewDevServerCLIAPI) {\n                if (cli.webpack.cli && typeof cli.webpack.cli.getArguments === \"function\") {\n                    options = cli.webpack.cli.getArguments(devServer.schema);\n                }\n                else {\n                    options = devServer.cli.getArguments();\n                }\n            }\n            else {\n                options = require(`${WEBPACK_DEV_SERVER_PACKAGE}/bin/cli-flags`);\n            }\n            // Old options format\n            // { devServer: [{...}, {}...] }\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            if (options.devServer) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                return options.devServer;\n            }\n            // New options format\n            // { flag1: {}, flag2: {} }\n            return Object.keys(options).map((key) => {\n                options[key].name = key;\n                return options[key];\n            });\n        };\n        await cli.makeCommand({\n            name: \"serve [entries...]\",\n            alias: [\"server\", \"s\"],\n            description: \"Run the webpack dev server.\",\n            usage: \"[entries...] [options]\",\n            pkg: \"@webpack-cli/serve\",\n            dependencies: [WEBPACK_PACKAGE, WEBPACK_DEV_SERVER_PACKAGE],\n        }, async () => {\n            let devServerFlags = [];\n            cli.webpack = await cli.loadWebpack();\n            try {\n                devServerFlags = loadDevServerOptions();\n            }\n            catch (error) {\n                cli.logger.error(`You need to install 'webpack-dev-server' for running 'webpack serve'.\\n${error}`);\n                process.exit(2);\n            }\n            const builtInOptions = cli.getBuiltInOptions().filter(\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (option) => option.name !== \"watch\");\n            return [...builtInOptions, ...devServerFlags];\n        }, \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        async (entries, options) => {\n            const builtInOptions = cli.getBuiltInOptions();\n            let devServerFlags = [];\n            try {\n                devServerFlags = loadDevServerOptions();\n            }\n            catch (error) {\n                // Nothing, to prevent future updates\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const webpackCLIOptions = {};\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const devServerCLIOptions = {};\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const processors = [];\n            for (const optionName in options) {\n                const kebabedOption = cli.toKebabCase(optionName);\n                // `webpack-dev-server` has own logic for the `--hot` option\n                const isBuiltInOption = kebabedOption !== \"hot\" &&\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    builtInOptions.find((builtInOption) => builtInOption.name === kebabedOption);\n                if (isBuiltInOption) {\n                    webpackCLIOptions[optionName] = options[optionName];\n                }\n                else {\n                    const needToProcess = devServerFlags.find(\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    (devServerOption) => devServerOption.name === kebabedOption && devServerOption.processor);\n                    if (needToProcess) {\n                        processors.push(needToProcess.processor);\n                    }\n                    devServerCLIOptions[optionName] = options[optionName];\n                }\n            }\n            for (const processor of processors) {\n                processor(devServerCLIOptions);\n            }\n            if (entries.length > 0) {\n                webpackCLIOptions.entry = [...entries, ...(webpackCLIOptions.entry || [])];\n            }\n            webpackCLIOptions.argv = Object.assign(Object.assign({}, options), { env: Object.assign({ WEBPACK_SERVE: true }, options.env) });\n            const compiler = await cli.createCompiler(webpackCLIOptions);\n            if (!compiler) {\n                return;\n            }\n            const servers = [];\n            if (cli.needWatchStdin(compiler) || devServerCLIOptions.stdin) {\n                // TODO remove in the next major release\n                // Compatibility with old `stdin` option for `webpack-dev-server`\n                // Should be removed for the next major release on both sides\n                if (devServerCLIOptions.stdin) {\n                    delete devServerCLIOptions.stdin;\n                }\n                process.stdin.on(\"end\", () => {\n                    Promise.all(servers.map((server) => {\n                        if (typeof server.stop === \"function\") {\n                            return server.stop();\n                        }\n                        // TODO remove in the next major release\n                        return new Promise((resolve) => {\n                            server.close(() => {\n                                resolve();\n                            });\n                        });\n                    })).then(() => {\n                        process.exit(0);\n                    });\n                });\n                process.stdin.resume();\n            }\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const DevServer = require(WEBPACK_DEV_SERVER_PACKAGE);\n            const isNewDevServerCLIAPI = typeof DevServer.schema !== \"undefined\";\n            let devServerVersion;\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-var-requires\n                devServerVersion = require(`${WEBPACK_DEV_SERVER_PACKAGE}/package.json`).version;\n            }\n            catch (err) {\n                cli.logger.error(`You need to install 'webpack-dev-server' for running 'webpack serve'.\\n${err}`);\n                process.exit(2);\n            }\n            const compilers = typeof compiler.compilers !== \"undefined\" ? compiler.compilers : [compiler];\n            const possibleCompilers = compilers.filter((compiler) => compiler.options.devServer);\n            const compilersForDevServer = possibleCompilers.length > 0 ? possibleCompilers : [compilers[0]];\n            const isDevServer4 = devServerVersion.startsWith(\"4\");\n            const usedPorts = [];\n            for (const compilerForDevServer of compilersForDevServer) {\n                let devServerOptions;\n                if (isNewDevServerCLIAPI) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    const args = devServerFlags.reduce((accumulator, flag) => {\n                        accumulator[flag.name] = flag;\n                        return accumulator;\n                    }, {});\n                    const values = Object.keys(devServerCLIOptions).reduce(\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    (accumulator, name) => {\n                        const kebabName = cli.toKebabCase(name);\n                        if (args[kebabName]) {\n                            accumulator[kebabName] = options[name];\n                        }\n                        return accumulator;\n                    }, {});\n                    const result = Object.assign({}, (compilerForDevServer.options.devServer || {}));\n                    const problems = (cli.webpack.cli && typeof cli.webpack.cli.processArguments === \"function\"\n                        ? cli.webpack.cli\n                        : DevServer.cli).processArguments(args, result, values);\n                    if (problems) {\n                        const groupBy = (xs, key) => {\n                            return xs.reduce((rv, x) => {\n                                (rv[x[key]] = rv[x[key]] || []).push(x);\n                                return rv;\n                            }, {});\n                        };\n                        const problemsByPath = groupBy(problems, \"path\");\n                        for (const path in problemsByPath) {\n                            const problems = problemsByPath[path];\n                            problems.forEach((problem) => {\n                                cli.logger.error(`${cli.capitalizeFirstLetter(problem.type.replace(/-/g, \" \"))}${problem.value ? ` '${problem.value}'` : \"\"} for the '--${problem.argument}' option${problem.index ? ` by index '${problem.index}'` : \"\"}`);\n                                if (problem.expected) {\n                                    cli.logger.error(`Expected: '${problem.expected}'`);\n                                }\n                            });\n                        }\n                        process.exit(2);\n                    }\n                    devServerOptions = result;\n                }\n                else {\n                    // TODO remove in the next major release\n                    const mergeOptions = (devServerOptions, devServerCliOptions) => {\n                        // CLI options should take precedence over devServer options,\n                        // and CLI options should have no default values included\n                        const options = Object.assign(Object.assign({}, devServerOptions), devServerCliOptions);\n                        if (devServerOptions.client && devServerCliOptions.client) {\n                            // the user could set some client options in their devServer config,\n                            // then also specify client options on the CLI\n                            options.client = Object.assign(Object.assign({}, devServerOptions.client), devServerCliOptions.client);\n                        }\n                        return options;\n                    };\n                    devServerOptions = mergeOptions(compilerForDevServer.options.devServer || {}, devServerCLIOptions);\n                }\n                // TODO remove in the next major release\n                if (!isDevServer4) {\n                    const getPublicPathOption = () => {\n                        const normalizePublicPath = (publicPath) => typeof publicPath === \"undefined\" || publicPath === \"auto\" ? \"/\" : publicPath;\n                        if (options.outputPublicPath) {\n                            return normalizePublicPath(compilerForDevServer.options.output.publicPath);\n                        }\n                        if (devServerOptions.publicPath) {\n                            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                            // @ts-ignore\n                            return normalizePublicPath(devServerOptions.publicPath);\n                        }\n                        return normalizePublicPath(compilerForDevServer.options.output.publicPath);\n                    };\n                    const getStatsOption = () => {\n                        if (options.stats) {\n                            return options.stats;\n                        }\n                        if (devServerOptions.stats) {\n                            return devServerOptions.stats;\n                        }\n                        return compilerForDevServer.options.stats;\n                    };\n                    devServerOptions.host = devServerOptions.host || \"localhost\";\n                    devServerOptions.port =\n                        typeof devServerOptions.port !== \"undefined\" ? devServerOptions.port : 8080;\n                    devServerOptions.stats = getStatsOption();\n                    devServerOptions.publicPath = getPublicPathOption();\n                }\n                if (devServerOptions.port) {\n                    const portNumber = Number(devServerOptions.port);\n                    if (usedPorts.find((port) => portNumber === port)) {\n                        throw new Error(\"Unique ports must be specified for each devServer option in your webpack configuration. Alternatively, run only 1 devServer config using the --config-name flag to specify your desired config.\");\n                    }\n                    usedPorts.push(portNumber);\n                }\n                try {\n                    let server;\n                    // TODO: remove after dropping webpack-dev-server@v3\n                    if (isDevServer4) {\n                        server = new DevServer(devServerOptions, compiler);\n                    }\n                    else {\n                        server = new DevServer(compiler, devServerOptions);\n                    }\n                    if (typeof server.start === \"function\") {\n                        await server.start();\n                    }\n                    else {\n                        // TODO remove in the next major release\n                        server.listen(devServerOptions.port, devServerOptions.host, (error) => {\n                            if (error) {\n                                throw error;\n                            }\n                        });\n                    }\n                    servers.push(server);\n                }\n                catch (error) {\n                    if (cli.isValidationError(error)) {\n                        cli.logger.error(error.message);\n                    }\n                    else {\n                        cli.logger.error(error);\n                    }\n                    process.exit(2);\n                }\n            }\n        });\n    }\n}\nexports.default = ServeCommand;\n"]}