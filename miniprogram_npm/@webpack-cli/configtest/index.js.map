{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst WEBPACK_PACKAGE = process.env.WEBPACK_PACKAGE || \"webpack\";\nclass ConfigTestCommand {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n    async apply(cli) {\n        await cli.makeCommand({\n            name: \"configtest [config-path]\",\n            alias: \"t\",\n            description: \"Validate a webpack configuration.\",\n            pkg: \"@webpack-cli/configtest\",\n            dependencies: [WEBPACK_PACKAGE],\n        }, [], async (configPath) => {\n            cli.webpack = await cli.loadWebpack();\n            const config = await cli.loadConfig(configPath ? { config: [configPath] } : {});\n            const configPaths = new Set();\n            if (Array.isArray(config.options)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                config.options.forEach((options) => {\n                    if (config.path.get(options)) {\n                        configPaths.add(config.path.get(options));\n                    }\n                });\n            }\n            else {\n                if (config.path.get(config.options)) {\n                    configPaths.add(config.path.get(config.options));\n                }\n            }\n            if (configPaths.size === 0) {\n                cli.logger.error(\"No configuration found.\");\n                process.exit(2);\n            }\n            cli.logger.info(`Validate '${Array.from(configPaths).join(\" ,\")}'.`);\n            try {\n                const error = cli.webpack.validate(config.options);\n                // TODO remove this after drop webpack@4\n                if (error && error.length > 0) {\n                    throw new cli.webpack.WebpackOptionsValidationError(error);\n                }\n            }\n            catch (error) {\n                if (cli.isValidationError(error)) {\n                    cli.logger.error(error.message);\n                }\n                else {\n                    cli.logger.error(error);\n                }\n                process.exit(2);\n            }\n            cli.logger.success(\"There are no validation errors in the given webpack configuration.\");\n        });\n    }\n}\nexports.default = ConfigTestCommand;\n"]}