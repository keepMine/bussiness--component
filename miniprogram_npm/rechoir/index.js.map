{"version":3,"sources":["index.js","lib/extension.js","lib/normalize.js","lib/register.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var path = require('path');\n\nvar extension = require('./lib/extension');\nvar normalize = require('./lib/normalize');\nvar register = require('./lib/register');\n\nexports.prepare = function(extensions, filepath, cwd, nothrow) {\n  var config, usedExtension, err, option, attempt, error;\n  var attempts = [];\n  var onlyErrors = true;\n  var exts = extension(filepath);\n\n  if (exts) {\n    exts.some(function(ext) {\n      usedExtension = ext;\n      config = normalize(extensions[ext]);\n      return !!config;\n    });\n  }\n\n  if (Object.keys(require.extensions).indexOf(usedExtension) !== -1) {\n    return true;\n  }\n\n  if (!config) {\n    if (nothrow) {\n      return;\n    }\n\n    throw new Error('No module loader found for \"' + usedExtension + '\".');\n  }\n\n  if (!cwd) {\n    cwd = path.dirname(path.resolve(filepath));\n  }\n  if (!Array.isArray(config)) {\n    config = [config];\n  }\n\n  for (var i in config) {\n    option = config[i];\n    attempt = register(cwd, option.module, option.register);\n    error = (attempt instanceof Error) ? attempt : null;\n    if (error) {\n      attempt = null;\n    }\n    attempts.push({\n      moduleName: option.module,\n      module: attempt,\n      error: error,\n    });\n    if (!error) {\n      onlyErrors = false;\n      break;\n    }\n  }\n  if (onlyErrors) {\n    err = new Error('Unable to use specified module loaders for \"' + usedExtension + '\".');\n    err.failures = attempts;\n    if (nothrow) {\n      return err;\n    }\n\n    throw err;\n  }\n  return attempts;\n};\n","\n\nvar path = require('path');\n\nfunction getLongExtension(basename) {\n  if (basename[basename.length - 1] === '.') {\n    return null;\n  }\n\n  var startIndex = (basename[0] === '.') ? 1 : 0;\n\n  var dotIndex = basename.indexOf('.', startIndex);\n  if (dotIndex <= startIndex) {\n    return null;\n  }\n\n  return basename.slice(dotIndex);\n}\n\nfunction getPossibleExtensions(longExtension) {\n  var arr = [longExtension];\n  var len = longExtension.length;\n  var startIndex = 1;\n\n  while (startIndex < len) {\n    var dotIndex = longExtension.indexOf('.', startIndex);\n    if (dotIndex < 0) {\n      break;\n    }\n    arr.push(longExtension.slice(dotIndex));\n    startIndex = dotIndex + 1;\n  }\n\n  return arr;\n}\n\nmodule.exports = function(input) {\n  var basename = path.basename(input);\n  var longExtension = getLongExtension(basename);\n  if (!longExtension) {\n    return;\n  }\n  return getPossibleExtensions(longExtension);\n};\n","function normalizer(config) {\n  if (typeof config === 'string') {\n    return { module: config };\n  }\n  return config;\n}\n\nmodule.exports = function(config) {\n  if (Array.isArray(config)) {\n    return config.map(normalizer);\n  }\n  return normalizer(config);\n};\n","var resolve = require('resolve');\n\nmodule.exports = function(cwd, moduleName, register) {\n  var result;\n  try {\n    var modulePath = resolve.sync(moduleName, { basedir: cwd });\n    result = require(modulePath);\n    if (typeof register === 'function') {\n      register(result);\n    }\n  } catch (e) {\n    result = e;\n  }\n  return result;\n};\n"]}