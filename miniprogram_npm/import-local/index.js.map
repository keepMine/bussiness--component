{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst path = require('path');\nconst {fileURLToPath} = require('url');\nconst resolveCwd = require('resolve-cwd');\nconst pkgDir = require('pkg-dir');\n\nmodule.exports = filename => {\n\tconst normalizedFilename = filename.startsWith('file://') ? fileURLToPath(filename) : filename;\n\tconst globalDir = pkgDir.sync(path.dirname(normalizedFilename));\n\tconst relativePath = path.relative(globalDir, normalizedFilename);\n\tconst pkg = require(path.join(globalDir, 'package.json'));\n\tconst localFile = resolveCwd.silent(path.join(pkg.name, relativePath));\n\tconst localNodeModules = path.join(process.cwd(), 'node_modules');\n\n\tconst filenameInLocalNodeModules = !path.relative(localNodeModules, normalizedFilename).startsWith('..') &&\n\t\t// On Windows, if `localNodeModules` and `normalizedFilename` are on different partitions, `path.relative()` returns the value of `normalizedFilename`, resulting in `filenameInLocalNodeModules` incorrectly becoming `true`.\n\t\tpath.parse(localNodeModules).root === path.parse(normalizedFilename).root;\n\n\t// Use `path.relative()` to detect local package installation,\n\t// because __filename's case is inconsistent on Windows\n\t// Can use `===` when targeting Node.js 8\n\t// See https://github.com/nodejs/node/issues/6624\n\treturn !filenameInLocalNodeModules && localFile && path.relative(localFile, normalizedFilename) !== '' && require(localFile);\n};\n"]}